// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios16.6 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-experimental-feature OpaqueTypeErasure -enable-bare-slash-regex -module-name ObjectDetectionFramework
import ARKit
import CommonCrypto
import CoreVideo
import Dispatch
import Foundation
import Network
@_exported import ObjectDetectionFramework
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import simd
import zlib
@objc final public class SocketAckEmitter : ObjectiveC.NSObject {
  @objc final public var rawEmitView: ObjectDetectionFramework.SocketRawAckView {
    @objc get
  }
  final public var expected: Swift.Bool {
    get
  }
  public init(socket: ObjectDetectionFramework.SocketIOClient, ackNum: Swift.Int)
  final public func with(_ items: any ObjectDetectionFramework.SocketData...)
  @objc final public func with(_ items: [Any])
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class OnAckCallback : ObjectiveC.NSObject {
  @objc deinit
  @objc final public func timingOut(after seconds: Swift.Double, callback: @escaping ObjectDetectionFramework.AckCallback)
}
public enum SocketAckStatus : Swift.String {
  case noAck
  public static func == (lhs: Swift.String, rhs: ObjectDetectionFramework.SocketAckStatus) -> Swift.Bool
  public static func == (lhs: ObjectDetectionFramework.SocketAckStatus, rhs: Swift.String) -> Swift.Bool
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers final public class SocketAnyEvent : ObjectiveC.NSObject {
  @objc final public let event: Swift.String
  @objc final public let items: [Any]?
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
public struct SocketEventHandler {
  public let event: Swift.String
  public let id: Foundation.UUID
  public let callback: ObjectDetectionFramework.NormalCallback
  public func executeCallback(with items: [Any], withAck ack: Swift.Int, withSocket socket: ObjectDetectionFramework.SocketIOClient)
}
@objc open class SocketIOClient : ObjectiveC.NSObject, ObjectDetectionFramework.SocketIOClientSpec {
  final public let nsp: Swift.String
  public var anyHandler: ((ObjectDetectionFramework.SocketAnyEvent) -> ())? {
    get
  }
  public var handlers: [ObjectDetectionFramework.SocketEventHandler] {
    get
  }
  weak public var manager: (any ObjectDetectionFramework.SocketManagerSpec)? {
    get
  }
  public var rawEmitView: ObjectDetectionFramework.SocketRawView {
    get
  }
  public var status: ObjectDetectionFramework.SocketIOStatus {
    get
  }
  public var sid: Swift.String? {
    get
  }
  public init(manager: any ObjectDetectionFramework.SocketManagerSpec, nsp: Swift.String)
  @objc deinit
  open func connect(withPayload payload: [Swift.String : Any]? = nil)
  open func connect(withPayload payload: [Swift.String : Any]? = nil, timeoutAfter: Swift.Double, withHandler handler: (() -> ())?)
  open func didConnect(toNamespace namespace: Swift.String, payload: [Swift.String : Any]?)
  open func didDisconnect(reason: Swift.String)
  open func disconnect()
  open func emit(_ event: Swift.String, _ items: any ObjectDetectionFramework.SocketData..., completion: (() -> ())? = nil)
  open func emit(_ event: Swift.String, with items: [any ObjectDetectionFramework.SocketData], completion: (() -> ())?)
  open func emitWithAck(_ event: Swift.String, _ items: any ObjectDetectionFramework.SocketData...) -> ObjectDetectionFramework.OnAckCallback
  open func emitWithAck(_ event: Swift.String, with items: [any ObjectDetectionFramework.SocketData]) -> ObjectDetectionFramework.OnAckCallback
  open func emitAck(_ ack: Swift.Int, with items: [Any])
  open func handleAck(_ ack: Swift.Int, data: [Any])
  open func handleClientEvent(_ event: ObjectDetectionFramework.SocketClientEvent, data: [Any])
  open func handleEvent(_ event: Swift.String, data: [Any], isInternalMessage: Swift.Bool, withAck ack: Swift.Int = -1)
  open func handlePacket(_ packet: ObjectDetectionFramework.SocketPacket)
  open func leaveNamespace()
  open func joinNamespace(withPayload payload: [Swift.String : Any]? = nil)
  open func off(clientEvent event: ObjectDetectionFramework.SocketClientEvent)
  open func off(_ event: Swift.String)
  open func off(id: Foundation.UUID)
  @discardableResult
  open func on(_ event: Swift.String, callback: @escaping ObjectDetectionFramework.NormalCallback) -> Foundation.UUID
  @discardableResult
  open func on(clientEvent event: ObjectDetectionFramework.SocketClientEvent, callback: @escaping ObjectDetectionFramework.NormalCallback) -> Foundation.UUID
  @discardableResult
  open func once(clientEvent event: ObjectDetectionFramework.SocketClientEvent, callback: @escaping ObjectDetectionFramework.NormalCallback) -> Foundation.UUID
  @discardableResult
  open func once(_ event: Swift.String, callback: @escaping ObjectDetectionFramework.NormalCallback) -> Foundation.UUID
  open func onAny(_ handler: @escaping (ObjectDetectionFramework.SocketAnyEvent) -> ())
  @available(*, unavailable, message: "Call the manager's reconnect method")
  open func reconnect()
  open func removeAllHandlers()
  open func setReconnecting(reason: Swift.String)
}
public struct SocketIOClientConfiguration : Swift.ExpressibleByArrayLiteral, Swift.Collection, Swift.MutableCollection {
  public typealias Element = ObjectDetectionFramework.SocketIOClientOption
  public typealias Index = Swift.Array<ObjectDetectionFramework.SocketIOClientOption>.Index
  public typealias Iterator = Swift.Array<ObjectDetectionFramework.SocketIOClientOption>.Iterator
  public typealias SubSequence = Swift.Array<ObjectDetectionFramework.SocketIOClientOption>.SubSequence
  public var startIndex: ObjectDetectionFramework.SocketIOClientConfiguration.Index {
    get
  }
  public var endIndex: ObjectDetectionFramework.SocketIOClientConfiguration.Index {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public var count: ObjectDetectionFramework.SocketIOClientConfiguration.Index.Stride {
    get
  }
  public var first: ObjectDetectionFramework.SocketIOClientConfiguration.Element? {
    get
  }
  public subscript(position: ObjectDetectionFramework.SocketIOClientConfiguration.Index) -> ObjectDetectionFramework.SocketIOClientConfiguration.Element {
    get
    set
  }
  public subscript(bounds: Swift.Range<ObjectDetectionFramework.SocketIOClientConfiguration.Index>) -> ObjectDetectionFramework.SocketIOClientConfiguration.SubSequence {
    get
    set
  }
  public init(arrayLiteral elements: ObjectDetectionFramework.SocketIOClientConfiguration.Element...)
  public func makeIterator() -> ObjectDetectionFramework.SocketIOClientConfiguration.Iterator
  public func index(after i: ObjectDetectionFramework.SocketIOClientConfiguration.Index) -> ObjectDetectionFramework.SocketIOClientConfiguration.Index
  public mutating func insert(_ element: ObjectDetectionFramework.SocketIOClientConfiguration.Element, replacing replace: Swift.Bool = true)
  public typealias ArrayLiteralElement = ObjectDetectionFramework.SocketIOClientConfiguration.Element
  public typealias Indices = Swift.DefaultIndices<ObjectDetectionFramework.SocketIOClientConfiguration>
}
public protocol ConfigSettable {
  mutating func setConfigs(_ config: ObjectDetectionFramework.SocketIOClientConfiguration)
}
public enum SocketIOVersion : Swift.Int {
  case two
  case three
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SocketIOClientOption {
  case compress
  case connectParams([Swift.String : Any])
  case cookies([Foundation.HTTPCookie])
  case extraHeaders([Swift.String : Swift.String])
  case forceNew(Swift.Bool)
  case forcePolling(Swift.Bool)
  case forceWebsockets(Swift.Bool)
  case enableSOCKSProxy(Swift.Bool)
  case handleQueue(Dispatch.DispatchQueue)
  case log(Swift.Bool)
  case logger(any ObjectDetectionFramework.SocketLogger)
  case path(Swift.String)
  case reconnects(Swift.Bool)
  case reconnectAttempts(Swift.Int)
  case reconnectWait(Swift.Int)
  case reconnectWaitMax(Swift.Int)
  case randomizationFactor(Swift.Double)
  case secure(Swift.Bool)
  case security(any ObjectDetectionFramework.CertificatePinning)
  case selfSigned(Swift.Bool)
  case sessionDelegate(any Foundation.URLSessionDelegate)
  case version(ObjectDetectionFramework.SocketIOVersion)
  public var description: Swift.String {
    get
  }
  public static func == (lhs: ObjectDetectionFramework.SocketIOClientOption, rhs: ObjectDetectionFramework.SocketIOClientOption) -> Swift.Bool
}
public protocol SocketIOClientSpec : AnyObject {
  var anyHandler: ((ObjectDetectionFramework.SocketAnyEvent) -> ())? { get }
  var handlers: [ObjectDetectionFramework.SocketEventHandler] { get }
  var manager: (any ObjectDetectionFramework.SocketManagerSpec)? { get }
  var nsp: Swift.String { get }
  var rawEmitView: ObjectDetectionFramework.SocketRawView { get }
  var sid: Swift.String? { get }
  var status: ObjectDetectionFramework.SocketIOStatus { get }
  func connect(withPayload payload: [Swift.String : Any]?)
  func connect(withPayload payload: [Swift.String : Any]?, timeoutAfter: Swift.Double, withHandler handler: (() -> ())?)
  func didConnect(toNamespace namespace: Swift.String, payload: [Swift.String : Any]?)
  func didDisconnect(reason: Swift.String)
  func didError(reason: Swift.String)
  func disconnect()
  func emit(_ event: Swift.String, _ items: any ObjectDetectionFramework.SocketData..., completion: (() -> ())?)
  func emit(_ event: Swift.String, with items: [any ObjectDetectionFramework.SocketData], completion: (() -> ())?)
  func emitAck(_ ack: Swift.Int, with items: [Any])
  func emitWithAck(_ event: Swift.String, _ items: any ObjectDetectionFramework.SocketData...) -> ObjectDetectionFramework.OnAckCallback
  func emitWithAck(_ event: Swift.String, with items: [any ObjectDetectionFramework.SocketData]) -> ObjectDetectionFramework.OnAckCallback
  func handleAck(_ ack: Swift.Int, data: [Any])
  func handleClientEvent(_ event: ObjectDetectionFramework.SocketClientEvent, data: [Any])
  func handleEvent(_ event: Swift.String, data: [Any], isInternalMessage: Swift.Bool, withAck ack: Swift.Int)
  func handlePacket(_ packet: ObjectDetectionFramework.SocketPacket)
  func leaveNamespace()
  func joinNamespace(withPayload payload: [Swift.String : Any]?)
  func off(clientEvent event: ObjectDetectionFramework.SocketClientEvent)
  func off(_ event: Swift.String)
  func off(id: Foundation.UUID)
  func on(_ event: Swift.String, callback: @escaping ObjectDetectionFramework.NormalCallback) -> Foundation.UUID
  func on(clientEvent event: ObjectDetectionFramework.SocketClientEvent, callback: @escaping ObjectDetectionFramework.NormalCallback) -> Foundation.UUID
  func once(clientEvent event: ObjectDetectionFramework.SocketClientEvent, callback: @escaping ObjectDetectionFramework.NormalCallback) -> Foundation.UUID
  func once(_ event: Swift.String, callback: @escaping ObjectDetectionFramework.NormalCallback) -> Foundation.UUID
  func onAny(_ handler: @escaping (ObjectDetectionFramework.SocketAnyEvent) -> ())
  func removeAllHandlers()
  func setReconnecting(reason: Swift.String)
}
extension ObjectDetectionFramework.SocketIOClientSpec {
  public func didError(reason: Swift.String)
}
public enum SocketClientEvent : Swift.String {
  case connect
  case disconnect
  case error
  case ping
  case pong
  case reconnect
  case reconnectAttempt
  case statusChange
  case websocketUpgrade
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum SocketIOStatus : Swift.Int, Swift.CustomStringConvertible {
  case notConnected
  case disconnected
  case connecting
  case connected
  public var active: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers final public class SocketRawView : ObjectiveC.NSObject {
  final public func emit(_ event: Swift.String, _ items: any ObjectDetectionFramework.SocketData...)
  @objc final public func emit(_ event: Swift.String, with items: [Any])
  final public func emitWithAck(_ event: Swift.String, _ items: any ObjectDetectionFramework.SocketData...) -> ObjectDetectionFramework.OnAckCallback
  @objc final public func emitWithAck(_ event: Swift.String, with items: [Any]) -> ObjectDetectionFramework.OnAckCallback
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class SocketRawAckView : ObjectiveC.NSObject {
  final public func with(_ items: any ObjectDetectionFramework.SocketData...)
  @objc final public func with(_ items: [Any])
  @objc deinit
}
@objc open class SocketEngine : ObjectiveC.NSObject, ObjectDetectionFramework.WebSocketDelegate, Foundation.URLSessionDelegate, ObjectDetectionFramework.SocketEnginePollable, ObjectDetectionFramework.SocketEngineWebsocket, ObjectDetectionFramework.ConfigSettable {
  final public let engineQueue: Dispatch.DispatchQueue
  public var connectParams: [Swift.String : Any]? {
    get
    set
  }
  public var extraHeaders: [Swift.String : Swift.String]?
  public var postWait: [ObjectDetectionFramework.Post]
  public var waitingForPoll: Swift.Bool
  public var waitingForPost: Swift.Bool
  public var closed: Swift.Bool {
    get
  }
  public var compress: Swift.Bool {
    get
  }
  public var connected: Swift.Bool {
    get
  }
  public var cookies: [Foundation.HTTPCookie]? {
    get
  }
  public var fastUpgrade: Swift.Bool {
    get
  }
  public var forcePolling: Swift.Bool {
    get
  }
  public var forceWebsockets: Swift.Bool {
    get
  }
  public var invalidated: Swift.Bool {
    get
  }
  public var polling: Swift.Bool {
    get
  }
  public var probing: Swift.Bool {
    get
  }
  public var session: Foundation.URLSession? {
    get
  }
  public var sid: Swift.String {
    get
  }
  public var socketPath: Swift.String {
    get
  }
  public var urlPolling: Foundation.URL {
    get
  }
  public var urlWebSocket: Foundation.URL {
    get
  }
  public var version: ObjectDetectionFramework.SocketIOVersion {
    get
  }
  @available(*, deprecated, message: "No longer needed, if we're not polling, then we must be doing websockets")
  public var websocket: Swift.Bool {
    get
  }
  public var enableSOCKSProxy: Swift.Bool {
    get
  }
  public var ws: ObjectDetectionFramework.WebSocket? {
    get
  }
  public var wsConnected: Swift.Bool {
    get
  }
  weak public var client: (any ObjectDetectionFramework.SocketEngineClient)?
  public init(client: any ObjectDetectionFramework.SocketEngineClient, url: Foundation.URL, config: ObjectDetectionFramework.SocketIOClientConfiguration)
  required convenience public init(client: any ObjectDetectionFramework.SocketEngineClient, url: Foundation.URL, options: [Swift.String : Any]?)
  @objc deinit
  open func connect()
  open func didError(reason: Swift.String)
  open func disconnect(reason: Swift.String)
  open func doFastUpgrade()
  open func flushWaitingForPostToWebSocket()
  open func parseEngineData(_ data: Foundation.Data)
  open func parseEngineMessage(_ message: Swift.String)
  open func setConfigs(_ config: ObjectDetectionFramework.SocketIOClientConfiguration)
  open func write(_ msg: Swift.String, withType type: ObjectDetectionFramework.SocketEnginePacketType, withData data: [Foundation.Data], completion: (() -> ())? = nil)
}
extension ObjectDetectionFramework.SocketEngine {
  public func URLSession(session: Foundation.URLSession, didBecomeInvalidWithError error: Foundation.NSError?)
}
extension ObjectDetectionFramework.SocketEngine {
  public func didReceive(event: ObjectDetectionFramework.WebSocketEvent, client _: ObjectDetectionFramework.WebSocket)
}
@objc public protocol SocketEngineClient {
  @objc func engineDidError(reason: Swift.String)
  @objc func engineDidClose(reason: Swift.String)
  @objc func engineDidOpen(reason: Swift.String)
  @objc func engineDidReceivePing()
  @objc func engineDidReceivePong()
  @objc func engineDidSendPing()
  @objc func engineDidSendPong()
  @objc func parseEngineMessage(_ msg: Swift.String)
  @objc func parseEngineBinaryData(_ data: Foundation.Data)
  @objc func engineDidWebsocketUpgrade(headers: [Swift.String : Swift.String])
}
@objc public enum SocketEnginePacketType : Swift.Int {
  case open
  case close
  case ping
  case pong
  case message
  case upgrade
  case noop
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol SocketEnginePollable : ObjectDetectionFramework.SocketEngineSpec {
  var invalidated: Swift.Bool { get }
  var postWait: [ObjectDetectionFramework.Post] { get set }
  var session: Foundation.URLSession? { get }
  var waitingForPoll: Swift.Bool { get set }
  var waitingForPost: Swift.Bool { get set }
  func doPoll()
  func sendPollMessage(_ message: Swift.String, withType type: ObjectDetectionFramework.SocketEnginePacketType, withData datas: [Foundation.Data], completion: (() -> ())?)
  func stopPolling()
}
extension ObjectDetectionFramework.SocketEnginePollable {
  public func doPoll()
  public func sendPollMessage(_ message: Swift.String, withType type: ObjectDetectionFramework.SocketEnginePacketType, withData datas: [Foundation.Data], completion: (() -> ())? = nil)
  public func stopPolling()
}
public protocol SocketEngineSpec : AnyObject {
  var client: (any ObjectDetectionFramework.SocketEngineClient)? { get set }
  var closed: Swift.Bool { get }
  var compress: Swift.Bool { get }
  var connected: Swift.Bool { get }
  var connectParams: [Swift.String : Any]? { get set }
  var cookies: [Foundation.HTTPCookie]? { get }
  var engineQueue: Dispatch.DispatchQueue { get }
  var extraHeaders: [Swift.String : Swift.String]? { get set }
  var fastUpgrade: Swift.Bool { get }
  var forcePolling: Swift.Bool { get }
  var forceWebsockets: Swift.Bool { get }
  var polling: Swift.Bool { get }
  var probing: Swift.Bool { get }
  var sid: Swift.String { get }
  var socketPath: Swift.String { get }
  var urlPolling: Foundation.URL { get }
  var urlWebSocket: Foundation.URL { get }
  var version: ObjectDetectionFramework.SocketIOVersion { get }
  @available(*, deprecated, message: "No longer needed, if we're not polling, then we must be doing websockets")
  var websocket: Swift.Bool { get }
  var ws: ObjectDetectionFramework.WebSocket? { get }
  init(client: any ObjectDetectionFramework.SocketEngineClient, url: Foundation.URL, options: [Swift.String : Any]?)
  func connect()
  func didError(reason: Swift.String)
  func disconnect(reason: Swift.String)
  func doFastUpgrade()
  func flushWaitingForPostToWebSocket()
  func parseEngineData(_ data: Foundation.Data)
  func parseEngineMessage(_ message: Swift.String)
  func write(_ msg: Swift.String, withType type: ObjectDetectionFramework.SocketEnginePacketType, withData data: [Foundation.Data], completion: (() -> ())?)
}
public protocol SocketEngineWebsocket : ObjectDetectionFramework.SocketEngineSpec {
  var wsConnected: Swift.Bool { get }
  func sendWebSocketMessage(_ str: Swift.String, withType type: ObjectDetectionFramework.SocketEnginePacketType, withData datas: [Foundation.Data], completion: (() -> ())?)
}
extension ObjectDetectionFramework.SocketEngineWebsocket {
  public func sendWebSocketMessage(_ str: Swift.String, withType type: ObjectDetectionFramework.SocketEnginePacketType, withData data: [Foundation.Data], completion: (() -> ())?)
}
@objc open class SocketManager : ObjectiveC.NSObject, ObjectDetectionFramework.SocketManagerSpec, ObjectDetectionFramework.SocketParsable, ObjectDetectionFramework.SocketDataBufferable, ObjectDetectionFramework.ConfigSettable {
  public var defaultSocket: ObjectDetectionFramework.SocketIOClient {
    get
  }
  final public let socketURL: Foundation.URL
  public var config: ObjectDetectionFramework.SocketIOClientConfiguration {
    get
    set
  }
  public var engine: (any ObjectDetectionFramework.SocketEngineSpec)?
  public var forceNew: Swift.Bool
  public var handleQueue: Dispatch.DispatchQueue
  public var nsps: [Swift.String : ObjectDetectionFramework.SocketIOClient]
  public var reconnects: Swift.Bool
  public var reconnectWait: Swift.Int
  public var reconnectWaitMax: Swift.Int
  public var randomizationFactor: Swift.Double
  public var status: ObjectDetectionFramework.SocketIOStatus {
    get
  }
  public var version: ObjectDetectionFramework.SocketIOVersion {
    get
  }
  public var waitingPackets: [ObjectDetectionFramework.SocketPacket]
  public init(socketURL: Foundation.URL, config: ObjectDetectionFramework.SocketIOClientConfiguration = [])
  @objc convenience public init(socketURL: Foundation.URL, config: [Swift.String : Any]?)
  @objc deinit
  open func connect()
  open func connectSocket(_ socket: ObjectDetectionFramework.SocketIOClient, withPayload payload: [Swift.String : Any]? = nil)
  open func didDisconnect(reason: Swift.String)
  open func disconnect()
  open func disconnectSocket(_ socket: ObjectDetectionFramework.SocketIOClient)
  open func disconnectSocket(forNamespace nsp: Swift.String)
  open func emitAll(clientEvent event: ObjectDetectionFramework.SocketClientEvent, data: [Any])
  open func emitAll(_ event: Swift.String, _ items: any ObjectDetectionFramework.SocketData...)
  @objc open func engineDidClose(reason: Swift.String)
  @objc open func engineDidError(reason: Swift.String)
  @objc open func engineDidOpen(reason: Swift.String)
  @objc open func engineDidReceivePing()
  @objc open func engineDidSendPing()
  @objc open func engineDidReceivePong()
  @objc open func engineDidSendPong()
  @objc open func engineDidWebsocketUpgrade(headers: [Swift.String : Swift.String])
  @objc open func parseEngineMessage(_ msg: Swift.String)
  @objc open func parseEngineBinaryData(_ data: Foundation.Data)
  open func reconnect()
  @discardableResult
  open func removeSocket(_ socket: ObjectDetectionFramework.SocketIOClient) -> ObjectDetectionFramework.SocketIOClient?
  open func setConfigs(_ config: ObjectDetectionFramework.SocketIOClientConfiguration)
  open func socket(forNamespace nsp: Swift.String) -> ObjectDetectionFramework.SocketIOClient
}
public protocol SocketManagerSpec : ObjectDetectionFramework.SocketEngineClient {
  var defaultSocket: ObjectDetectionFramework.SocketIOClient { get }
  var engine: (any ObjectDetectionFramework.SocketEngineSpec)? { get set }
  var forceNew: Swift.Bool { get set }
  var handleQueue: Dispatch.DispatchQueue { get set }
  var nsps: [Swift.String : ObjectDetectionFramework.SocketIOClient] { get set }
  var reconnects: Swift.Bool { get set }
  var reconnectWait: Swift.Int { get set }
  var reconnectWaitMax: Swift.Int { get set }
  var randomizationFactor: Swift.Double { get set }
  var socketURL: Foundation.URL { get }
  var status: ObjectDetectionFramework.SocketIOStatus { get }
  var version: ObjectDetectionFramework.SocketIOVersion { get }
  func connect()
  func connectSocket(_ socket: ObjectDetectionFramework.SocketIOClient, withPayload: [Swift.String : Any]?)
  func didDisconnect(reason: Swift.String)
  func disconnect()
  func disconnectSocket(_ socket: ObjectDetectionFramework.SocketIOClient)
  func disconnectSocket(forNamespace nsp: Swift.String)
  func emitAll(_ event: Swift.String, _ items: any ObjectDetectionFramework.SocketData...)
  func reconnect()
  @discardableResult
  func removeSocket(_ socket: ObjectDetectionFramework.SocketIOClient) -> ObjectDetectionFramework.SocketIOClient?
  func socket(forNamespace nsp: Swift.String) -> ObjectDetectionFramework.SocketIOClient
}
public struct SocketPacket : Swift.CustomStringConvertible {
  public let nsp: Swift.String
  public let id: Swift.Int
  public let type: ObjectDetectionFramework.SocketPacket.PacketType
  public var binary: [Foundation.Data] {
    get
  }
  public var data: [Any] {
    get
  }
  public var args: [Any] {
    get
  }
  public var description: Swift.String {
    get
  }
  public var event: Swift.String {
    get
  }
  public var packetString: Swift.String {
    get
  }
}
extension ObjectDetectionFramework.SocketPacket {
  public enum PacketType : Swift.Int {
    case connect
    case disconnect
    case event
    case ack
    case error
    case binaryEvent
    case binaryAck
    public var isBinary: Swift.Bool {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
public protocol SocketParsable : AnyObject {
  func parseBinaryData(_ data: Foundation.Data) -> ObjectDetectionFramework.SocketPacket?
  func parseSocketMessage(_ message: Swift.String) -> ObjectDetectionFramework.SocketPacket?
}
public enum SocketParsableError : Swift.Error {
  case invalidDataArray
  case invalidPacket
  case invalidPacketType
  public static func == (a: ObjectDetectionFramework.SocketParsableError, b: ObjectDetectionFramework.SocketParsableError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol SocketDataBufferable : AnyObject {
  var waitingPackets: [ObjectDetectionFramework.SocketPacket] { get set }
}
extension ObjectDetectionFramework.SocketParsable where Self : ObjectDetectionFramework.SocketDataBufferable, Self : ObjectDetectionFramework.SocketManagerSpec {
  public func parseSocketMessage(_ message: Swift.String) -> ObjectDetectionFramework.SocketPacket?
  public func parseBinaryData(_ data: Foundation.Data) -> ObjectDetectionFramework.SocketPacket?
}
public protocol SocketLogger : AnyObject {
  var log: Swift.Bool { get set }
  func log(_ message: @autoclosure () -> Swift.String, type: Swift.String)
  func error(_ message: @autoclosure () -> Swift.String, type: Swift.String)
}
extension ObjectDetectionFramework.SocketLogger {
  public func log(_ message: @autoclosure () -> Swift.String, type: Swift.String)
  public func error(_ message: @autoclosure () -> Swift.String, type: Swift.String)
}
public protocol SocketData {
  func socketRepresentation() throws -> any ObjectDetectionFramework.SocketData
}
extension ObjectDetectionFramework.SocketData {
  public func socketRepresentation() -> any ObjectDetectionFramework.SocketData
}
extension Swift.Array : ObjectDetectionFramework.SocketData {
}
extension Swift.Bool : ObjectDetectionFramework.SocketData {
}
extension Swift.Dictionary : ObjectDetectionFramework.SocketData {
}
extension Swift.Double : ObjectDetectionFramework.SocketData {
}
extension Swift.Int : ObjectDetectionFramework.SocketData {
}
extension Foundation.NSArray : ObjectDetectionFramework.SocketData {
}
extension Foundation.Data : ObjectDetectionFramework.SocketData {
}
extension Foundation.NSData : ObjectDetectionFramework.SocketData {
}
extension Foundation.NSDictionary : ObjectDetectionFramework.SocketData {
}
extension Foundation.NSString : ObjectDetectionFramework.SocketData {
}
extension Foundation.NSNull : ObjectDetectionFramework.SocketData {
}
extension Swift.String : ObjectDetectionFramework.SocketData {
}
public typealias AckCallback = ([Any]) -> ()
public typealias NormalCallback = ([Any], ObjectDetectionFramework.SocketAckEmitter) -> ()
public typealias Post = (msg: Swift.String, completion: (() -> ())?)
public protocol CompressionHandler {
  func load(headers: [Swift.String : Swift.String])
  func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  func compress(data: Foundation.Data) -> Foundation.Data?
}
public class WSCompression : ObjectDetectionFramework.CompressionHandler {
  public init()
  public func load(headers: [Swift.String : Swift.String])
  public func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  public func compress(data: Foundation.Data) -> Foundation.Data?
  @objc deinit
}
public protocol EngineDelegate : AnyObject {
  func didReceive(event: ObjectDetectionFramework.WebSocketEvent)
}
public protocol Engine {
  func register(delegate: any ObjectDetectionFramework.EngineDelegate)
  func start(request: Foundation.URLRequest)
  func stop(closeCode: Swift.UInt16)
  func forceStop()
  func write(data: Foundation.Data, opcode: ObjectDetectionFramework.FrameOpCode, completion: (() -> ())?)
  func write(string: Swift.String, completion: (() -> ())?)
}
@objc @_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
public class NativeEngine : ObjectiveC.NSObject, ObjectDetectionFramework.Engine, Foundation.URLSessionDataDelegate, Foundation.URLSessionWebSocketDelegate {
  public func register(delegate: any ObjectDetectionFramework.EngineDelegate)
  public func start(request: Foundation.URLRequest)
  public func stop(closeCode: Swift.UInt16)
  public func forceStop()
  public func write(string: Swift.String, completion: (() -> ())?)
  public func write(data: Foundation.Data, opcode: ObjectDetectionFramework.FrameOpCode, completion: (() -> ())?)
  @objc public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didOpenWithProtocol protocol: Swift.String?)
  @objc public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didCloseWith closeCode: Foundation.URLSessionWebSocketTask.CloseCode, reason: Foundation.Data?)
  @objc override dynamic public init()
  @objc deinit
}
public class WSEngine : ObjectDetectionFramework.Engine, ObjectDetectionFramework.TransportEventClient, ObjectDetectionFramework.FramerEventClient, ObjectDetectionFramework.FrameCollectorDelegate, ObjectDetectionFramework.HTTPHandlerDelegate {
  public var respondToPingWithPong: Swift.Bool
  public init(transport: any ObjectDetectionFramework.Transport, certPinner: (any ObjectDetectionFramework.CertificatePinning)? = nil, headerValidator: any ObjectDetectionFramework.HeaderValidator = FoundationSecurity(), httpHandler: any ObjectDetectionFramework.HTTPHandler = FoundationHTTPHandler(), framer: any ObjectDetectionFramework.Framer = WSFramer(), compressionHandler: (any ObjectDetectionFramework.CompressionHandler)? = nil)
  public func register(delegate: any ObjectDetectionFramework.EngineDelegate)
  public func start(request: Foundation.URLRequest)
  public func stop(closeCode: Swift.UInt16 = CloseCode.normal.rawValue)
  public func forceStop()
  public func write(string: Swift.String, completion: (() -> ())?)
  public func write(data: Foundation.Data, opcode: ObjectDetectionFramework.FrameOpCode, completion: (() -> ())?)
  public func connectionChanged(state: ObjectDetectionFramework.ConnectionState)
  public func didReceiveHTTP(event: ObjectDetectionFramework.HTTPEvent)
  public func frameProcessed(event: ObjectDetectionFramework.FrameEvent)
  public func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  public func didForm(event: ObjectDetectionFramework.FrameCollector.Event)
  @objc deinit
}
public class FoundationHTTPHandler : ObjectDetectionFramework.HTTPHandler {
  public init()
  public func convert(request: Foundation.URLRequest) -> Foundation.Data
  public func parse(data: Foundation.Data) -> Swift.Int
  public func register(delegate: any ObjectDetectionFramework.HTTPHandlerDelegate)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FoundationHTTPServerHandler : ObjectDetectionFramework.HTTPServerHandler {
  public func register(delegate: any ObjectDetectionFramework.HTTPServerDelegate)
  public func createResponse(headers: [Swift.String : Swift.String]) -> Foundation.Data
  public func parse(data: Foundation.Data)
  @objc deinit
}
public protocol FrameCollectorDelegate : AnyObject {
  func didForm(event: ObjectDetectionFramework.FrameCollector.Event)
  func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
}
@_hasMissingDesignatedInitializers public class FrameCollector {
  public enum Event {
    case text(Swift.String)
    case binary(Foundation.Data)
    case pong(Foundation.Data?)
    case ping(Foundation.Data?)
    case error(any Swift.Error)
    case closed(Swift.String, Swift.UInt16)
  }
  public func add(frame: ObjectDetectionFramework.Frame)
  @objc deinit
}
public enum CloseCode : Swift.UInt16 {
  case normal
  case goingAway
  case protocolError
  case protocolUnhandledType
  case noStatusReceived
  case encoding
  case policyViolated
  case messageTooBig
  public init?(rawValue: Swift.UInt16)
  public typealias RawValue = Swift.UInt16
  public var rawValue: Swift.UInt16 {
    get
  }
}
public enum FrameOpCode : Swift.UInt8 {
  case continueFrame
  case textFrame
  case binaryFrame
  case connectionClose
  case ping
  case pong
  case unknown
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct Frame {
}
public enum FrameEvent {
  case frame(ObjectDetectionFramework.Frame)
  case error(any Swift.Error)
}
public protocol FramerEventClient : AnyObject {
  func frameProcessed(event: ObjectDetectionFramework.FrameEvent)
}
public protocol Framer {
  func add(data: Foundation.Data)
  func register(delegate: any ObjectDetectionFramework.FramerEventClient)
  func createWriteFrame(opcode: ObjectDetectionFramework.FrameOpCode, payload: Foundation.Data, isCompressed: Swift.Bool) -> Foundation.Data
  func updateCompression(supports: Swift.Bool)
  func supportsCompression() -> Swift.Bool
}
public class WSFramer : ObjectDetectionFramework.Framer {
  public var compressionEnabled: Swift.Bool
  public init(isServer: Swift.Bool = false)
  public func updateCompression(supports: Swift.Bool)
  public func supportsCompression() -> Swift.Bool
  public func add(data: Foundation.Data)
  public func register(delegate: any ObjectDetectionFramework.FramerEventClient)
  public func createWriteFrame(opcode: ObjectDetectionFramework.FrameOpCode, payload: Foundation.Data, isCompressed: Swift.Bool) -> Foundation.Data
  @objc deinit
}
public protocol MyWSArrayType {
}
extension Swift.UInt8 : ObjectDetectionFramework.MyWSArrayType {
}
extension Swift.Array where Element : ObjectDetectionFramework.MyWSArrayType, Element : Swift.UnsignedInteger {
  public func readUint16(offset: Swift.Int) -> Swift.UInt16
  public func readUint64(offset: Swift.Int) -> Swift.UInt64
  public func unmaskData(maskStart: Swift.Int, offset: Swift.Int, length: Swift.Int) -> Foundation.Data
}
public func writeUint16(_ buffer: inout [Swift.UInt8], offset: Swift.Int, value: Swift.UInt16)
public func writeUint32(_ buffer: inout [Swift.UInt8], offset: Swift.Int, value: Swift.UInt32)
public func writeUint64(_ buffer: inout [Swift.UInt8], offset: Swift.Int, value: Swift.UInt64)
public enum HTTPUpgradeError : Swift.Error {
  case notAnUpgrade(Swift.Int)
  case invalidData
}
public struct HTTPWSHeader {
  public static func createUpgrade(request: Foundation.URLRequest, supportsCompression: Swift.Bool, secKeyValue: Swift.String) -> Foundation.URLRequest
  public static func generateWebSocketKey() -> Swift.String
}
public enum HTTPEvent {
  case success([Swift.String : Swift.String])
  case failure(any Swift.Error)
}
public protocol HTTPHandlerDelegate : AnyObject {
  func didReceiveHTTP(event: ObjectDetectionFramework.HTTPEvent)
}
public protocol HTTPHandler {
  func register(delegate: any ObjectDetectionFramework.HTTPHandlerDelegate)
  func convert(request: Foundation.URLRequest) -> Foundation.Data
  func parse(data: Foundation.Data) -> Swift.Int
}
public protocol HTTPServerDelegate : AnyObject {
  func didReceive(event: ObjectDetectionFramework.HTTPEvent)
}
public protocol HTTPServerHandler {
  func register(delegate: any ObjectDetectionFramework.HTTPServerDelegate)
  func parse(data: Foundation.Data)
  func createResponse(headers: [Swift.String : Swift.String]) -> Foundation.Data
}
public struct URLParts {
}
extension Foundation.URL {
  public var isTLSScheme: Swift.Bool {
    get
  }
  public func getParts() -> ObjectDetectionFramework.URLParts?
}
public class StringHTTPHandler : ObjectDetectionFramework.HTTPHandler {
  public init()
  public func convert(request: Foundation.URLRequest) -> Foundation.Data
  public func parse(data: Foundation.Data) -> Swift.Int
  public func register(delegate: any ObjectDetectionFramework.HTTPHandlerDelegate)
  @objc deinit
}
public enum FoundationSecurityError : Swift.Error {
  case invalidRequest
  public static func == (a: ObjectDetectionFramework.FoundationSecurityError, b: ObjectDetectionFramework.FoundationSecurityError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class FoundationSecurity {
  public init(allowSelfSigned: Swift.Bool = false)
  @objc deinit
}
extension ObjectDetectionFramework.FoundationSecurity : ObjectDetectionFramework.CertificatePinning {
  public func evaluateTrust(trust: Security.SecTrust, domain: Swift.String?, completion: ((ObjectDetectionFramework.PinningState) -> ()))
}
extension ObjectDetectionFramework.FoundationSecurity : ObjectDetectionFramework.HeaderValidator {
  public func validate(headers: [Swift.String : Swift.String], key: Swift.String) -> (any Swift.Error)?
}
public enum SecurityErrorCode : Swift.UInt16 {
  case acceptFailed
  case pinningFailed
  public init?(rawValue: Swift.UInt16)
  public typealias RawValue = Swift.UInt16
  public var rawValue: Swift.UInt16 {
    get
  }
}
public enum PinningState {
  case success
  case failed(CoreFoundation.CFError?)
}
public protocol CertificatePinning : AnyObject {
  func evaluateTrust(trust: Security.SecTrust, domain: Swift.String?, completion: ((ObjectDetectionFramework.PinningState) -> ()))
}
public protocol HeaderValidator : AnyObject {
  func validate(headers: [Swift.String : Swift.String], key: Swift.String) -> (any Swift.Error)?
}
public enum ConnectionEvent {
  case connected([Swift.String : Swift.String])
  case disconnected(Swift.String, Swift.UInt16)
  case text(Swift.String)
  case binary(Foundation.Data)
  case pong(Foundation.Data?)
  case ping(Foundation.Data?)
  case error(any Swift.Error)
}
public protocol Connection {
  func write(data: Foundation.Data, opcode: ObjectDetectionFramework.FrameOpCode)
}
public protocol ConnectionDelegate : AnyObject {
  func didReceive(event: ObjectDetectionFramework.ServerEvent)
}
public enum ServerEvent {
  case connected(any ObjectDetectionFramework.Connection, [Swift.String : Swift.String])
  case disconnected(any ObjectDetectionFramework.Connection, Swift.String, Swift.UInt16)
  case text(any ObjectDetectionFramework.Connection, Swift.String)
  case binary(any ObjectDetectionFramework.Connection, Foundation.Data)
  case pong(any ObjectDetectionFramework.Connection, Foundation.Data?)
  case ping(any ObjectDetectionFramework.Connection, Foundation.Data?)
}
public protocol Server {
  func start(address: Swift.String, port: Swift.UInt16) -> (any Swift.Error)?
}
@available(macOS 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
@available(watchOS, unavailable)
public class WebSocketServer : ObjectDetectionFramework.Server, ObjectDetectionFramework.ConnectionDelegate {
  public var onEvent: ((ObjectDetectionFramework.ServerEvent) -> Swift.Void)?
  public init()
  public func start(address: Swift.String, port: Swift.UInt16) -> (any Swift.Error)?
  public func didReceive(event: ObjectDetectionFramework.ServerEvent)
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
public class ServerConnection : ObjectDetectionFramework.Connection, ObjectDetectionFramework.HTTPServerDelegate, ObjectDetectionFramework.FramerEventClient, ObjectDetectionFramework.FrameCollectorDelegate, ObjectDetectionFramework.TransportEventClient {
  public var onEvent: ((ObjectDetectionFramework.ConnectionEvent) -> Swift.Void)?
  weak public var delegate: (any ObjectDetectionFramework.ConnectionDelegate)?
  public func write(data: Foundation.Data, opcode: ObjectDetectionFramework.FrameOpCode)
  public func connectionChanged(state: ObjectDetectionFramework.ConnectionState)
  public func didReceive(event: ObjectDetectionFramework.HTTPEvent)
  public func frameProcessed(event: ObjectDetectionFramework.FrameEvent)
  public func didForm(event: ObjectDetectionFramework.FrameCollector.Event)
  public func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  @objc deinit
}
public enum ErrorType : Swift.Error {
  case compressionError
  case securityError
  case protocolError
  case serverError
  public static func == (a: ObjectDetectionFramework.ErrorType, b: ObjectDetectionFramework.ErrorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct WSError : Swift.Error {
  public let type: ObjectDetectionFramework.ErrorType
  public let message: Swift.String
  public let code: Swift.UInt16
  public init(type: ObjectDetectionFramework.ErrorType, message: Swift.String, code: Swift.UInt16)
}
public protocol WebSocketClient : AnyObject {
  func connect()
  func disconnect(closeCode: Swift.UInt16)
  func write(string: Swift.String, completion: (() -> ())?)
  func write(stringData: Foundation.Data, completion: (() -> ())?)
  func write(data: Foundation.Data, completion: (() -> ())?)
  func write(ping: Foundation.Data, completion: (() -> ())?)
  func write(pong: Foundation.Data, completion: (() -> ())?)
}
extension ObjectDetectionFramework.WebSocketClient {
  public func write(string: Swift.String)
  public func write(data: Foundation.Data)
  public func write(ping: Foundation.Data)
  public func write(pong: Foundation.Data)
  public func disconnect()
}
public enum WebSocketEvent {
  case connected([Swift.String : Swift.String])
  case disconnected(Swift.String, Swift.UInt16)
  case text(Swift.String)
  case binary(Foundation.Data)
  case pong(Foundation.Data?)
  case ping(Foundation.Data?)
  case error((any Swift.Error)?)
  case viabilityChanged(Swift.Bool)
  case reconnectSuggested(Swift.Bool)
  case cancelled
}
public protocol WebSocketDelegate : AnyObject {
  func didReceive(event: ObjectDetectionFramework.WebSocketEvent, client: ObjectDetectionFramework.WebSocket)
}
open class WebSocket : ObjectDetectionFramework.WebSocketClient, ObjectDetectionFramework.EngineDelegate {
  weak public var delegate: (any ObjectDetectionFramework.WebSocketDelegate)?
  public var onEvent: ((ObjectDetectionFramework.WebSocketEvent) -> Swift.Void)?
  public var request: Foundation.URLRequest
  public var callbackQueue: Dispatch.DispatchQueue
  public var respondToPingWithPong: Swift.Bool {
    get
    set
  }
  public init(request: Foundation.URLRequest, engine: any ObjectDetectionFramework.Engine)
  convenience public init(request: Foundation.URLRequest, certPinner: (any ObjectDetectionFramework.CertificatePinning)? = FoundationSecurity(), compressionHandler: (any ObjectDetectionFramework.CompressionHandler)? = nil, useCustomEngine: Swift.Bool = true)
  public func connect()
  public func disconnect(closeCode: Swift.UInt16 = CloseCode.normal.rawValue)
  public func forceDisconnect()
  public func write(data: Foundation.Data, completion: (() -> ())?)
  public func write(string: Swift.String, completion: (() -> ())?)
  public func write(stringData: Foundation.Data, completion: (() -> ())?)
  public func write(ping: Foundation.Data, completion: (() -> ())?)
  public func write(pong: Foundation.Data, completion: (() -> ())?)
  public func didReceive(event: ObjectDetectionFramework.WebSocketEvent)
  @objc deinit
}
public enum FoundationTransportError : Swift.Error {
  case invalidRequest
  case invalidOutputStream
  case timeout
  public static func == (a: ObjectDetectionFramework.FoundationTransportError, b: ObjectDetectionFramework.FoundationTransportError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public class FoundationTransport : ObjectiveC.NSObject, ObjectDetectionFramework.Transport, Foundation.StreamDelegate {
  public var usingTLS: Swift.Bool {
    get
  }
  public init(streamConfiguration: ((Foundation.InputStream, Foundation.OutputStream) -> Swift.Void)? = nil)
  @objc deinit
  public func connect(url: Foundation.URL, timeout: Swift.Double = 10, certificatePinning: (any ObjectDetectionFramework.CertificatePinning)? = nil)
  public func disconnect()
  public func register(delegate: any ObjectDetectionFramework.TransportEventClient)
  public func write(data: Foundation.Data, completion: @escaping (((any Swift.Error)?) -> ()))
  @objc open func stream(_ aStream: Foundation.Stream, handle eventCode: Foundation.Stream.Event)
}
public enum TCPTransportError : Swift.Error {
  case invalidRequest
  public static func == (a: ObjectDetectionFramework.TCPTransportError, b: ObjectDetectionFramework.TCPTransportError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
public class TCPTransport : ObjectDetectionFramework.Transport {
  public var usingTLS: Swift.Bool {
    get
  }
  public init(connection: Network.NWConnection)
  public init()
  public func connect(url: Foundation.URL, timeout: Swift.Double = 10, certificatePinning: (any ObjectDetectionFramework.CertificatePinning)? = nil)
  public func disconnect()
  public func register(delegate: any ObjectDetectionFramework.TransportEventClient)
  public func write(data: Foundation.Data, completion: @escaping (((any Swift.Error)?) -> ()))
  @objc deinit
}
public enum ConnectionState {
  case connected
  case waiting
  case cancelled
  case failed((any Swift.Error)?)
  case viability(Swift.Bool)
  case shouldReconnect(Swift.Bool)
  case receive(Foundation.Data)
}
public protocol TransportEventClient : AnyObject {
  func connectionChanged(state: ObjectDetectionFramework.ConnectionState)
}
public protocol Transport : AnyObject {
  func register(delegate: any ObjectDetectionFramework.TransportEventClient)
  func connect(url: Foundation.URL, timeout: Swift.Double, certificatePinning: (any ObjectDetectionFramework.CertificatePinning)?)
  func disconnect()
  func write(data: Foundation.Data, completion: @escaping (((any Swift.Error)?) -> ()))
  var usingTLS: Swift.Bool { get }
}
public class ObjectAnchor {
  @available(iOS 11.0, *)
  public protocol ObjectAnchorDelegate {
    func onInitialized()
    func onScenePointsUpdated(points: [SceneKit.SCNVector3]?)
    func onObjectPointsUpdated(points: [SceneKit.SCNVector3]?)
    func onStatusUpdated(status: Swift.String?)
    func onObjectTransformationUpdated(transformation: [Swift.Float]?)
  }
  public enum DetectionType {
    case ML
    case POINTCLOUD
    public static func == (a: ObjectDetectionFramework.ObjectAnchor.DetectionType, b: ObjectDetectionFramework.ObjectAnchor.DetectionType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var objectAnchorDelegate: (any ObjectDetectionFramework.ObjectAnchor.ObjectAnchorDelegate)?
  public init()
  public func startScan()
  public func stopScan()
  public func getTransformationArray() -> [Swift.Float]?
  public func getRotation(transformation: [Swift.Float]?) -> SceneKit.SCNVector4
  public func getPosition(transformation: [Swift.Float]?) -> SceneKit.SCNVector3
  public func processFrame(frame: ARKit.ARFrame)
  public func setDetectionConfig(detectionType: ObjectDetectionFramework.ObjectAnchor.DetectionType, modelId: Swift.String, token: Swift.String)
  @objc deinit
}
extension ObjectDetectionFramework.SocketAckStatus : Swift.Equatable {}
extension ObjectDetectionFramework.SocketAckStatus : Swift.Hashable {}
extension ObjectDetectionFramework.SocketAckStatus : Swift.RawRepresentable {}
extension ObjectDetectionFramework.SocketIOVersion : Swift.Equatable {}
extension ObjectDetectionFramework.SocketIOVersion : Swift.Hashable {}
extension ObjectDetectionFramework.SocketIOVersion : Swift.RawRepresentable {}
extension ObjectDetectionFramework.SocketIOClientOption : Swift.Equatable {}
extension ObjectDetectionFramework.SocketIOClientOption : Swift.CustomStringConvertible {}
extension ObjectDetectionFramework.SocketClientEvent : Swift.Equatable {}
extension ObjectDetectionFramework.SocketClientEvent : Swift.Hashable {}
extension ObjectDetectionFramework.SocketClientEvent : Swift.RawRepresentable {}
extension ObjectDetectionFramework.SocketIOStatus : Swift.Equatable {}
extension ObjectDetectionFramework.SocketIOStatus : Swift.Hashable {}
extension ObjectDetectionFramework.SocketIOStatus : Swift.RawRepresentable {}
extension ObjectDetectionFramework.SocketEnginePacketType : Swift.Equatable {}
extension ObjectDetectionFramework.SocketEnginePacketType : Swift.Hashable {}
extension ObjectDetectionFramework.SocketEnginePacketType : Swift.RawRepresentable {}
extension ObjectDetectionFramework.SocketPacket.PacketType : Swift.Equatable {}
extension ObjectDetectionFramework.SocketPacket.PacketType : Swift.Hashable {}
extension ObjectDetectionFramework.SocketPacket.PacketType : Swift.RawRepresentable {}
extension ObjectDetectionFramework.SocketParsableError : Swift.Equatable {}
extension ObjectDetectionFramework.SocketParsableError : Swift.Hashable {}
extension ObjectDetectionFramework.CloseCode : Swift.Equatable {}
extension ObjectDetectionFramework.CloseCode : Swift.Hashable {}
extension ObjectDetectionFramework.CloseCode : Swift.RawRepresentable {}
extension ObjectDetectionFramework.FrameOpCode : Swift.Equatable {}
extension ObjectDetectionFramework.FrameOpCode : Swift.Hashable {}
extension ObjectDetectionFramework.FrameOpCode : Swift.RawRepresentable {}
extension ObjectDetectionFramework.FoundationSecurityError : Swift.Equatable {}
extension ObjectDetectionFramework.FoundationSecurityError : Swift.Hashable {}
extension ObjectDetectionFramework.SecurityErrorCode : Swift.Equatable {}
extension ObjectDetectionFramework.SecurityErrorCode : Swift.Hashable {}
extension ObjectDetectionFramework.SecurityErrorCode : Swift.RawRepresentable {}
extension ObjectDetectionFramework.ErrorType : Swift.Equatable {}
extension ObjectDetectionFramework.ErrorType : Swift.Hashable {}
extension ObjectDetectionFramework.FoundationTransportError : Swift.Equatable {}
extension ObjectDetectionFramework.FoundationTransportError : Swift.Hashable {}
extension ObjectDetectionFramework.TCPTransportError : Swift.Equatable {}
extension ObjectDetectionFramework.TCPTransportError : Swift.Hashable {}
extension ObjectDetectionFramework.ObjectAnchor.DetectionType : Swift.Equatable {}
extension ObjectDetectionFramework.ObjectAnchor.DetectionType : Swift.Hashable {}
